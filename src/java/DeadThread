package concurrence;

/**
 * 
 * @title DeadThread
 *
 * @explain 演示死锁
 * @author yujiansong
 * @date 2016年9月18日
 */
public class DeadThread {

	private static String A = "A";
	private static String B = "B";
	
	public static void main(String[] args) {
		new DeadThread().deadLock();
	}
	
	private void deadLock(){
		Thread t1 = new Thread(new Runnable() {
			
			@Override
			public void run() {
				synchronized (A) {
					try {
						//t1未释放锁导致t2处于一直等待
						Thread.currentThread().sleep(2000);
					} catch (InterruptedException e) {
						e.printStackTrace();
					}
					synchronized (B) {
						System.out.println("1");
					}
				}
			}
		});
		
		Thread t2 = new Thread(new Runnable() {
			
			@Override
			public void run() {
				synchronized(B){
					synchronized (A) {
						System.out.println("2");
					}
				}
			}
		});
		
		t1.start();
		t2.start();
	}
}
